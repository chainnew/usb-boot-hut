use std::time::Duration;
use std::thread;
use console::{style, Term};

// Cool animation frames
pub const HECTIC_FRAMES: &[&str] = &[
    " โก FORMATTING โก ",
    " โ FORMATTING โ ",
    " โฒ FORMATTING โฒ ",
    " โ FORMATTING โ ",
    " โ FORMATTING โ ",
    " โผ FORMATTING โผ ",
];

pub const USB_SPINNER: &[&str] = &[
    " [โโโโ    ] ",
    " [โโโโโ   ] ",
    " [โโโโโโ  ] ",
    " [โโโโโโโ ] ",
    " [โโโโโโโโ] ",
    " [โโโโโโโ ] ",
    " [โโโโโโ  ] ",
    " [โโโโโ   ] ",
];

pub const ENCRYPTION_FRAMES: &[&str] = &[
    " ๐ ENCRYPTING [โ         ] ",
    " ๐ ENCRYPTING [โโ        ] ",
    " ๐ ENCRYPTING [โโโ       ] ",
    " ๐ ENCRYPTING [โโโโ      ] ",
    " ๐ ENCRYPTING [โโโโโ     ] ",
    " ๐ ENCRYPTING [โโโโโโ    ] ",
    " ๐ ENCRYPTING [โโโโโโโ   ] ",
    " ๐ ENCRYPTING [โโโโโโโโ  ] ",
    " ๐ ENCRYPTING [โโโโโโโโโ ] ",
    " ๐ ENCRYPTING [โโโโโโโโโโ] ",
];

pub const WIPE_ANIMATION: &[&str] = &[
    " ๐งน WIPING [โโโโโโโโโโ] 0%  ",
    " ๐งน WIPING [โโโโโโโโโโ] 10% ",
    " ๐งน WIPING [โโโโโโโโโโ] 20% ",
    " ๐งน WIPING [โโโโโโโโโโ] 30% ",
    " ๐งน WIPING [โโโโโโโโโโ] 40% ",
    " ๐งน WIPING [โโโโโโโโโโ] 50% ",
    " ๐งน WIPING [โโโโโโโโโโ] 60% ",
    " ๐งน WIPING [โโโโโโโโโโ] 70% ",
    " ๐งน WIPING [โโโโโโโโโโ] 80% ",
    " ๐งน WIPING [โโโโโโโโโโ] 90% ",
    " ๐งน WIPING [โโโโโโโโโโ] 100%",
];

pub const SUCCESS_FRAMES: &[&str] = &[
    " โ ",
    " โ ",
    " โ ",
];

pub struct AnimationPlayer {
    term: Term,
    running: bool,
}

impl AnimationPlayer {
    pub fn new() -> Self {
        Self {
            term: Term::stdout(),
            running: false,
        }
    }
    
    pub fn play_hectic(&mut self, message: &str) {
        self.running = true;
        let mut frame_idx = 0;
        
        while self.running {
            self.term.clear_line().ok();
            print!("\r{} {}", HECTIC_FRAMES[frame_idx], style(message).cyan());
            self.term.flush().ok();
            
            frame_idx = (frame_idx + 1) % HECTIC_FRAMES.len();
            thread::sleep(Duration::from_millis(150));
        }
    }
    
    pub fn play_usb_spinner(&mut self, message: &str) {
        self.running = true;
        let mut frame_idx = 0;
        
        while self.running {
            self.term.clear_line().ok();
            print!("\r{} {}", USB_SPINNER[frame_idx], style(message).yellow());
            self.term.flush().ok();
            
            frame_idx = (frame_idx + 1) % USB_SPINNER.len();
            thread::sleep(Duration::from_millis(100));
        }
    }
    
    pub fn play_encryption(&mut self, current_progress: u8) {
        let frame_idx = (current_progress as usize * ENCRYPTION_FRAMES.len()) / 100;
        let frame_idx = frame_idx.min(ENCRYPTION_FRAMES.len() - 1);
        
        self.term.clear_line().ok();
        print!("\r{}", style(ENCRYPTION_FRAMES[frame_idx]).green());
        self.term.flush().ok();
    }
    
    pub fn play_wipe(&mut self, current_progress: u8) {
        let frame_idx = (current_progress as usize * WIPE_ANIMATION.len()) / 100;
        let frame_idx = frame_idx.min(WIPE_ANIMATION.len() - 1);
        
        self.term.clear_line().ok();
        print!("\r{}", style(WIPE_ANIMATION[frame_idx]).red());
        self.term.flush().ok();
    }
    
    pub fn show_success(&mut self, message: &str) {
        for frame in SUCCESS_FRAMES {
            self.term.clear_line().ok();
            print!("\r{} {}", style(frame).green().bold(), style(message).green());
            self.term.flush().ok();
            thread::sleep(Duration::from_millis(200));
        }
        println!(); // New line after success
    }
    
    pub fn stop(&mut self) {
        self.running = false;
        self.term.clear_line().ok();
    }
}

// ASCII art for the banner
pub const USB_BOOT_HUT_BANNER: &str = r#"
โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ
โ                                                           โ
โ   โโโ   โโโโโโโโโโโโโโโโโโ     โโโโโโโ  โโโโโโโ  โโโโโโโ โ
โ   โโโ   โโโโโโโโโโโโโโโโโโโ    โโโโโโโโโโโโโโโโโโโโโโโโโโโ
โ   โโโ   โโโโโโโโโโโโโโโโโโโ    โโโโโโโโโโโ   โโโโโโ   โโโโ
โ   โโโ   โโโโโโโโโโโโโโโโโโโ    โโโโโโโโโโโ   โโโโโโ   โโโโ
โ   โโโโโโโโโโโโโโโโโโโโโโโโโ    โโโโโโโโโโโโโโโโโโโโโโโโโโโ
โ    โโโโโโโ โโโโโโโโโโโโโโโ     โโโโโโโ  โโโโโโโ  โโโโโโโ โ
โ                                                           โ
โ              โโโ  โโโโโโ   โโโโโโโโโโโโ                   โ
โ              โโโ  โโโโโโ   โโโโโโโโโโโโ                   โ
โ              โโโโโโโโโโโ   โโโ   โโโ                      โ
โ              โโโโโโโโโโโ   โโโ   โโโ                      โ
โ              โโโ  โโโโโโโโโโโโ   โโโ                      โ
โ              โโโ  โโโ โโโโโโโ    โโโ                      โ
โ                                                           โ
โ            ๐ Secure USB Bootable Drive Manager ๐         โ
โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ
"#;

pub fn print_banner() {
    println!("{}", style(USB_BOOT_HUT_BANNER).cyan().bold());
}